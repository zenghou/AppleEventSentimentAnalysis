# change to dataframe
customStopWords$word <- as.character(customStopWords$word)
wordCount <- df %>%
unnest_tokens(IndividualWords, tweet) %>%
anti_join(stop_words, by = c("IndividualWords" = "word")) %>%
anti_join(customStopWords, by = c("IndividualWords" = "word")) %>%
count(IndividualWords, sort = TRUE)
# plot wordcloud2
wordcloud2(wordCount, size = 1, minSize = 0.5, gridSize =  0,
fill = wordCount$n,
fontFamily = 'Helvetica Neue', fontWeight = '200',
color = 'white', backgroundColor = "black",
minRotation = -pi/2, maxRotation = pi/2, shuffle = FALSE,
rotateRatio = 0.3, shape = 'circle', ellipticity = 0.65)
# widgetsize = NULL, figPath = NULL, hoverFunction = NULL)
}
runApp()
generateWordCloud <- function(df) {
# custom stop words that are related to apple or the product
customStopWords <- data.frame(word = c("apple", "Apple"))
# "iphone","iPhone","iPhone8", "iphone8",
# "iphoneX", "iPhoneX", "iphonex", "iphoneX", "phone",
# "event", ""))
# change to dataframe
customStopWords$word <- as.character(customStopWords$word)
wordCount <- df %>%
unnest_tokens(IndividualWords, tweet) %>%
anti_join(stop_words, by = c("IndividualWords" = "word")) %>%
anti_join(customStopWords, by = c("IndividualWords" = "word")) %>%
count(IndividualWords, sort = TRUE)
# plot wordcloud2
wordcloud2(wordCount, size = 1, minSize = 0.5, gridSize =  0,
fontFamily = 'Helvetica Neue', fontWeight = '200',
color = 'white', backgroundColor = "black",
minRotation = -pi/2, maxRotation = pi/2, shuffle = FALSE,
rotateRatio = 0.3, shape = 'circle', ellipticity = 0.65)
# widgetsize = NULL, figPath = NULL, hoverFunction = NULL)
}
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = 'seoncd y axis'
)
p <- plot_ly() %>%
add_bars(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore)
p
p <- plot_ly() %>%
add_bars(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, fill = ~rateOfReturn$isAboveAverage)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$r)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~150*rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~200*rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)'
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore) %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$r) %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "x"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~*100rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time", ticks = FALSE),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.26)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.4)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.45)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.5)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.4)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.3)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.45)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time", range = c(-0.45, 0.45)),
yaxis = list(title = "Average Sentiment Score Per Min")
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.45)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn$r, name = 'Rate of Return') %>%
layout(
title = "double y axis",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min",range = c(-0.45, 0.45))
)
p
ay <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.45)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn[,3], name = 'Rate of Return') %>%
layout(
title = "Average Sentiment Score v.s. Rate of Return",
yaxis2 = ay,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min",range = c(-0.45, 0.45))
)
p
y2 <- list(
tickfont = list(color = "black"),
overlaying = "y",
side = "right",
title = 'Rate of Return (%)',
range = c(-0.45, 0.45)
)
p <- plot_ly() %>%
add_lines(x = ~rateOfReturn$time, y = ~rateOfReturn$sentimentScore, name = 'Sentiment Score') %>%
add_lines(x = ~rateOfReturn$time, y = ~100*rateOfReturn[,3], name = 'Rate of Return') %>%
layout(
title = "Average Sentiment Score v.s. Rate of Return",
yaxis2 = y2,
xaxis = list(title = "time"),
yaxis = list(title = "Average Sentiment Score Per Min",range = c(-0.45, 0.45))
)
p
runApp()
# authorized to my account
rsconnect::setAccountInfo(name='zenghou',
token='A21CC771BFAA2CB9ED48FCA03708A7F2',
secret='/KGWAoBry0k6xeKgUIx7oHa7kXUCODB7kArPqlx7')
rsconnect::deployApp('/Users/ZengHou/Desktop/Y3S1/NM3239/Group\ Project/AppleEventSentimentAnalysis')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# authorized to my account
rsconnect::setAccountInfo(name='zenghou',
token='A21CC771BFAA2CB9ED48FCA03708A7F2',
secret='/KGWAoBry0k6xeKgUIx7oHa7kXUCODB7kArPqlx7')
rsconnect::deployApp('/Users/ZengHou/Desktop/Y3S1/NM3239/Group\ Project/AppleEventSentimentAnalysis')
View(rateOfReturn)
View(df)
View(df)
unnest <- df %>%
unnest_tokens(IndividualWordInTweet, tweet)
# view top 5 rows to check
head(unnest)
# sentiment
sentimentsCleaned  <- unnest %>%
# remove stop words
anti_join(stop_words, by = c("IndividualWordInTweet" = "word")) %>%
# get score for each word
inner_join(get_sentiments("afinn"), by = c("IndividualWordInTweet" = "word"))
library(dpl)
library(dplyr)
unnest <- df %>%
unnest_tokens(IndividualWordInTweet, tweet)
# view top 5 rows to check
head(unnest)
# sentiment
sentimentsCleaned  <- unnest %>%
# remove stop words
anti_join(stop_words, by = c("IndividualWordInTweet" = "word")) %>%
# get score for each word
inner_join(get_sentiments("afinn"), by = c("IndividualWordInTweet" = "word"))
library(shiny)
library(plotly)
library(ggplot2)
library(wordcloud)
library(tidytext)
library(rsconnect)
library(swirl)
library(dplyr)
library(stringr)
library(wordcloud)
library(reshape2)
library(syuzhet)
library(sentimentr)
library(tidyr)
library(wordcloud2)
library(rsconnect)
library(RColorBrewer)
unnest <- df %>%
unnest_tokens(IndividualWordInTweet, tweet)
# view top 5 rows to check
head(unnest)
# sentiment
sentimentsCleaned  <- unnest %>%
# remove stop words
anti_join(stop_words, by = c("IndividualWordInTweet" = "word")) %>%
# get score for each word
inner_join(get_sentiments("afinn"), by = c("IndividualWordInTweet" = "word"))
# change date col from factor to character
sentimentsCleaned$date <- as.character(sentimentsCleaned$date)
class(sentimentsCleaned$date) # check if conversion is correct
# get time until minute
sentimentsCleaned$date <- substr(sentimentsCleaned$date, 12,16)
head(sentimentsCleaned)
# group by date before aggregating
group_by(sentimentsCleaned, date)
minuteScore <- aggregate(sentimentsCleaned$score, FUN = mean, by = list(date = sentimentsCleaned$date))
# plot chart
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l")
sentimentsCleaned$date <- as.character(sentimentsCleaned$date)
View(unnest)
length(unnest)
dim(unnest)
View(sentimentsCleaned)
# change date col from factor to character
sentimentsCleaned$time <- as.character(sentimentsCleaned$time)
class(sentimentsCleaned$time) # check if conversion is correct
# get time until minute
sentimentsCleaned$time <- substr(sentimentsCleaned$time, 12,16)
head(sentimentsCleaned)
# group by date before aggregating
group_by(sentimentsCleaned, time)
minuteScore <- aggregate(sentimentsCleaned$score, FUN = mean, by = list(time = sentimentsCleaned$time))
# plot chart
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l")
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l")
View(minuteScore)
head(sentimentsCleaned)
group_by(sentimentsCleaned, time)
minuteScore <- aggregate(sentimentsCleaned$score, FUN = mean, by = list(time = sentimentsCleaned$time))
View(minuteScore)
sentimentsCleaned  <- unnest %>%
# remove stop words
anti_join(stop_words, by = c("IndividualWordInTweet" = "word")) %>%
# get score for each word
inner_join(get_sentiments("afinn"), by = c("IndividualWordInTweet" = "word"))
sentimentsCleaned$time <- as.character(sentimentsCleaned$time)
class(sentimentsCleaned$time) # check if conversion is correct
View(sentimentsCleaned)
group_by(sentimentsCleaned, time)
minuteScore <- aggregate(sentimentsCleaned$score, FUN = mean, by = list(time = sentimentsCleaned$time))
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l")
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l", title ="asdasda")
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l",  main ="asdasda")
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l",  main ="Sentiment Score (Word Level)")
plot(rateOfReturn$x, y = rateOfReturn$sentimentScore, xlab = "time", ylab = "Average Sentiment Score", type = "l")
plot(rateOfReturn$sentimentScore, xlab = "time", ylab = "Average Sentiment Score", type = "l")
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l",  main ="Sentiment Score (Word Level)", col = "red")
line(rateOfReturn$sentimentScore, xlab = "time", ylab = "Average Sentiment Score", type = "l", col = "green")
line(rateOfReturn$sentimentScore, col = "green")
line(rateOfReturn$sentimentScore, col = "green")
line(rateOfReturn$sentimentScore)
lines(rateOfReturn$sentimentScore, col = "green")
runApp()
summary(rateOfReturn$sentimentScore)
density(rateOfReturn$sentimentScore)
distribution <- density(rateOfReturn$sentimentScore)
plot(distribution)
plot(distribution, main = "Distribution of Scores")
runApp()
example <- read.table("AllTweets.txt", sep ="\t", comment.char='', quote='', header= TRUE)
View(example)
View(df)
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l",  main ="Sentiment Score", col = "red")
lines(rateOfReturn$sentimentScore, col = "green")
lines(rateOfReturn$sentimentScore, col = "green")
View(ApplePrices)
ApplePrices <- read.csv("ApplePrices.csv")
ApplePrices <- data.frame(price)
ApplePrices[5:10] <- NULL
ApplePrices <- na.omit(ApplePrices)
ApplePrices$date = as.character(ApplePrices$date)
View(ApplePrices)
plot(minuteScore$x, xlab = "minute", ylab = "Average Sentiment Score", type = "l",  main ="Sentiment Score", col = "red")
lines(rateOfReturn$sentimentScore, col = "green")
plot(rateOfReturn$sentimentScore, xlab = "minute", ylab = "Average Sentiment Score", type = "l",  main ="Sentiment Score", col = "red")
lines(ApplePrices$open, col = "green")
